package com.velocitai.movie_booking.service.imp;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.velocitai.movie_booking.dao.SeatRepository;
import com.velocitai.movie_booking.dao.TicketRepository;
import com.velocitai.movie_booking.dao.UserRepository;
import com.velocitai.movie_booking.model.Seat;
import com.velocitai.movie_booking.model.Ticket;
import com.velocitai.movie_booking.model.User;
import com.velocitai.movie_booking.service.TicketService;
@Service
public class TicketServiceImp implements TicketService {

	@Autowired
	TicketRepository ticketRepository;
	@Autowired
    SeatRepository seatRepository;
	
	@Autowired
	UserRepository userRepository;

	
	@Override
	public ResponseEntity<Ticket> saveTicket(Ticket ticket,boolean paymentStatus) {
		/**
		 * booking ticket after payment is sucessfull true 
		 * add ticket and change seat status to false 
		 * in frontend only true status can be booked
		 */
		if (!paymentStatus) {
	        return ResponseEntity.badRequest().body(null);
	    }

	    
	    User managedUser = userRepository.findById(ticket.getUser().getId())
	        .orElseThrow(() -> new RuntimeException("User not found"));

	
	    ticket.setUser(managedUser);

	    
	    List<Seat> managedSeats = new ArrayList<>();
	    for (Seat seat : ticket.getSeats()) {
	        Seat managedSeat = seatRepository.findById(seat.getId())
	            .orElseThrow(() -> new RuntimeException("Seat not found"));
	        managedSeat.setBooked(true);
	        managedSeats.add(managedSeat);
	    }
	    
	  
	    ticket.setSeats(managedSeats);

	    
	    Ticket savedTicket = ticketRepository.save(ticket);
	    
	    return ResponseEntity.ok(savedTicket);
	}
	
	@Override
	public ResponseEntity<?> deleteTicket(Long ticketId) {
	    // Step 1: Find the ticket by its ID
	    Optional<Ticket> ticketOpt = ticketRepository.findById(ticketId);
	    
	    // Step 2: Check if the ticket exists
	    if (!ticketOpt.isPresent()) {
	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Ticket not found");
	    }
	    
	    Ticket ticket = ticketOpt.get();

	    // Step 3: Unbook the associated seats
	    if (ticket.getSeats() != null && !ticket.getSeats().isEmpty()) {
	        for (Seat seat : ticket.getSeats()) {
	            Optional<Seat> managedSeatOpt = seatRepository.findById(seat.getId());
	            if (managedSeatOpt.isPresent()) {
	                Seat managedSeat = managedSeatOpt.get();
	                managedSeat.setBooked(false);
	                seatRepository.save(managedSeat); // Save updated seat status
	            } else {
	                return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                                     .body("Seat with ID " + seat.getId() + " not found");
	            }
	        }
	    }

	    // Step 4: Delete the ticket
	    ticketRepository.delete(ticket);
	    
	    return ResponseEntity.ok("Ticket deleted successfully");
	}




}
