package com.velocitai.movie_booking.service.imp;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.velocitai.movie_booking.dao.SeatRepository;
import com.velocitai.movie_booking.dao.TicketRepository;
import com.velocitai.movie_booking.dao.UserRepository;
import com.velocitai.movie_booking.model.Seat;
import com.velocitai.movie_booking.model.Ticket;
import com.velocitai.movie_booking.model.User;
import com.velocitai.movie_booking.service.TicketService;
@Service
public class TicketServiceImp implements TicketService {

	@Autowired
	TicketRepository ticketRepository;
	@Autowired
    SeatRepository seatRepository;
	
	@Autowired
	UserRepository userRepository;

	
	@Override
	public ResponseEntity<Ticket> saveTicket(Ticket ticket,boolean paymentStatus) {
		/**
		 * booking ticket after payment is sucessfull true 
		 * add ticket and change seat status to false 
		 * in frontend only true status can be booked
		 */
		if (!paymentStatus) {
	        return ResponseEntity.badRequest().body(null);
	    }

	    
	    User managedUser = userRepository.findById(ticket.getUser().getId())
	        .orElseThrow(() -> new RuntimeException("User not found"));

	
	    ticket.setUser(managedUser);

	    
	    List<Seat> managedSeats = new ArrayList<>();
	    for (Seat seat : ticket.getSeats()) {
	        Seat managedSeat = seatRepository.findById(seat.getId())
	            .orElseThrow(() -> new RuntimeException("Seat not found"));
	        managedSeat.setBooked(true);
	        managedSeats.add(managedSeat);
	    }
	    
	  
	    ticket.setSeats(managedSeats);

	    
	    Ticket savedTicket = ticketRepository.save(ticket);
	    
	    return ResponseEntity.ok(savedTicket);
	}
	
	@Override
	public ResponseEntity<?> deleteTicket(Long ticketId) {
	    // Check if the ticket exists
		Optional<Ticket> ticketOptional = ticketRepository.findById(id);
	    if (ticketOptional.isEmpty()) {
	        return ResponseEntity.notFound().build();
	    }

	    Ticket ticket = ticketOptional.get();

	    // Unbook the seats associated with the ticket
	    for (Seat seat : ticket.getSeats()) {
	        seat.setBooked(false); // Unbook the seat
	        seatRepository.save(seat); // Save the seat status
	    }

	    // Remove the ticket from the user's tickets list (if this relationship exists)
	    User user = ticket.getUser();
	    if (user != null) {
	        user.getTickets().remove(ticket); // Remove ticket from user's list
	    }

	    // Save the user entity if the relationship is bidirectional
	    userRepository.save(user);

	    // Delete the ticket
	    ticketRepository.delete(ticket);

	    return ResponseEntity.ok("Ticket deleted successfully");
	}




}
